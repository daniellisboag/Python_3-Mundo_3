Funções

Em Python, uma função é um bloco de código reutilizável que realiza uma tarefa específica.
As funções são definidas usando a palavra-chave def, seguida do nome da função e parênteses que podem conter parâmetros.

Aqui estão os principais conceitos sobre funções em Python:
Definição de Função: Para definir uma função, usamos a palavra-chave def, seguida do nome da função e parênteses:

def saudacao():
   print("Olá, mundo!")

Chamada de Função: Após a definição, você pode chamar a função pelo nome:
saudacao()  # Saída: Olá, mundo!

Funções com Parâmetros: Funções podem receber parâmetros para tornar o comportamento mais flexível. Por exemplo:
def saudacao(nome):
   print(f"Olá, {nome}!")

saudacao("Maria")  # Saída: Olá, Maria!

Funções com Retorno: Funções podem retornar um valor utilizando a palavra-chave return:
def soma(a, b):
   return a + b

resultado = soma(3, 4)  # resultado é 7
print(resultado)  # Saída: 7

Parâmetros Opcionais (Valores Padrão): Você pode fornecer valores padrão para parâmetros,
permitindo que a função seja chamada com menos argumentos:
def saudacao(nome="Visitante"):
   print(f"Olá, {nome}!")

saudacao()  # Saída: Olá, Visitante!
saudacao("João")  # Saída: Olá, João!

Funções Lambda: Python também permite a criação de funções anônimas, chamadas de funções lambda.
Elas são úteis para funções simples, geralmente em uma única linha:
soma = lambda x, y: x + y
print(soma(2, 3))  # Saída: 5

Funções Recursivas: Uma função pode chamar a si mesma, criando um processo recursivo:
def fatorial(n):
   if n == 0:
      return 1
   else:
      return n * fatorial(n - 1)

print(fatorial(5))  # Saída: 120

Esses são alguns dos conceitos fundamentais sobre funções em Python, que ajudam a organizar o código e promover a reutilização.

# -----------------------------------------------------------------------------------------------------------------------------

Empacotamento

O empacotamento (ou "packing") em Python é uma técnica que permite agrupar múltiplos valores em uma única variável,
geralmente dentro de uma função, para lidar com argumentos de maneira mais flexível.

Na prática, o empacotamento pode ser feito de duas formas principais:

1. Empacotamento de Posicionais com *args
Usa-se o *args para empacotar argumentos posicionais em uma tupla dentro de uma função. Isso permite que a função aceite
qualquer quantidade de argumentos, sem precisar definir o número exato deles.

Exemplo:
def exemplo(*args):
   for arg in args:
      print(arg)

exemplo(1, 2, 3, 4)
Aqui, args será uma tupla contendo todos os argumentos passados para a função (1, 2, 3, 4).

2. Empacotamento de Nomeados com **kwargs
Usa-se o **kwargs para empacotar argumentos nomeados em um dicionário. Isso permite passar um número variável de argumentos
nomeados para uma função.

Exemplo:
def exemplo(**kwargs):
   for chave, valor in kwargs.items():
      print(f'{chave}: {valor}')

exemplo(nome = "João", idade = 25)
Neste caso, kwargs será um dicionário com as chaves e valores: {'nome' : 'João', 'idade' : 25}.

Resumo:
*args: Empacota argumentos posicionais em uma tupla.
**kwargs: Empacota argumentos nomeados em um dicionário.
Ambos são úteis quando você não sabe antecipadamente quantos argumentos serão passados para a função.

# -----------------------------------------------------------------------------------------------------------------------------

Interactive help

O Interactive Help no Python é uma ferramenta que permite acessar informações sobre funções, classes, módulos e objetos
diretamente no ambiente interativo do Python (como o terminal ou o console do Python). Isso é muito útil para explorar a
documentação enquanto você está programando, sem precisar sair do seu ambiente de desenvolvimento.

Aqui estão alguns recursos do Interactive Help:
help(): A função help() fornece informações detalhadas sobre objetos, módulos, funções, etc.

Pode ser usada de várias maneiras.

Para obter ajuda geral:
help()
Isso entra no modo interativo de ajuda, onde você pode digitar o nome do objeto que deseja explorar.

Para obter ajuda sobre um módulo, classe ou função específica:
help(nome_do_objeto)

Exemplo:
help(str)
Isso fornece informações sobre a classe str (strings) do Python.

dir(): A função dir() lista os atributos e métodos disponíveis para um objeto, o que pode ser útil quando você deseja explorar
o que pode ser feito com determinado objeto.

Exemplo:
dir(str)
Isso retorna todos os métodos e atributos da classe str.

pydoc: Além do help(), você pode usar o pydoc para gerar documentação no formato de texto de qualquer módulo do Python. Você
pode usá-lo diretamente no terminal, fora do ambiente Python:
pydoc nome_do_modulo
Essas ferramentas tornam mais fácil navegar pela documentação e entender melhor as bibliotecas e funções que você está usando
no Python, sem a necessidade de sair do seu ambiente de trabalho.

# -----------------------------------------------------------------------------------------------------------------------------

Parâmetros opcionais

Parâmetros opcionais em Python são argumentos de função que possuem um valor padrão. Isso significa que, ao chamar a função,
você pode omitir esses parâmetros e o Python usará o valor definido como padrão.

def funcao(param1, param_opcional = valor_padrao):
   # Código da função

Exemplo:
def saudacao(nome, saudacao = 'Olá'):
   print(f'{saudacao}, {nome}!')

saudacao('Maria') # Saída: Olá, Maria!
saudacao('João', 'Bom dia') # Saída: Bom dia, João!

Resumo:
Parâmetros opcionais vêm após os obrigatórios.
Se não forem passados na chamada da função, usam o valor padrão.
Você pode passar parâmetros opcionais por nome, fora de ordem.

# -----------------------------------------------------------------------------------------------------------------------------

Escopo de variáveis

O escopo define onde uma variável pode ser acessada dentro do código. Em Python, existem basicamente dois tipos principais:

Escopo Local: Variáveis criadas dentro de funções. Só existem enquanto a função está rodando.

Exemplo:
def minha_funcao():
   x = 10  # escopo local
   print(x)

minha_funcao()
# print(x) → Erro! 'x' não existe fora da função

Escopo Global: Variáveis criadas fora de qualquer função. Podem ser acessadas dentro de funções
(mas não modificadas, a menos que use global).

Exemplo:
x = 10  # escopo global

def minha_funcao():
   print(x)  # funciona

minha_funcao()

# -----------------------------------------------------------------------------------------------------------------------------

Return

Em Python, a palavra-chave return é usada dentro de funções para encerrar a execução da função e enviar um valor de volta
para quem a chamou.

Estrutura básica:
def minha_funcao():
   return valor

O que você precisa saber:
Finaliza a função: qualquer código após return não será executado.
Pode retornar qualquer tipo de dado: números, strings, listas, dicionários, objetos, etc.
Pode retornar múltiplos valores: usando tuplas.

def operacoes(a, b):
   return a + b, a - b
soma, subtracao = operacoes(10, 5)

def quadrado(x):
   return x * x

resultado = quadrado(4)
print(resultado)  # Saída: 16
Se uma função não tiver return, ela retorna None por padrão.

# -----------------------------------------------------------------------------------------------------------------------------
