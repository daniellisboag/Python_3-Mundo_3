Modularização em Python

Modularização é a prática de dividir um programa grande em partes menores e reutilizáveis chamadas módulos.
Isso melhora a organização, manutenção e reutilização do código.

Benefícios da modularização:
Código mais organizado e legível.
Facilidade de manutenção e testes.
Reaproveitamento de código em outros projetos.
Redução de duplicação de código.

Como funciona em Python:
Um módulo é qualquer arquivo .py com definições de funções, classes ou variáveis.
Um pacote é um diretório que contém um ou mais módulos e um arquivo __init__.py (pode estar vazio).

Exemplo de módulo:
Arquivo: meu_modulo.py

def saudacao(nome):
   return f"Olá, {nome}!"

Arquivo principal: main.py

import meu_modulo

print(meu_modulo.saudacao("Ana"))

Formas de importação:
import meu_modulo
from meu_modulo import saudacao
from meu_modulo import saudacao as ola

Boas práticas:
Dar nomes descritivos aos módulos.
Evitar funções muito grandes dentro de um módulo.
Usar o bloco if __name__ == "__main__": para testes dentro de módulos.

--------------------------------------------------------------------------------------------------------------------

pacote

Um pacote é uma pasta (diretório) que contém módulos (arquivos .py) e um arquivo especial chamado __init__.py,
que indica ao Python que essa pasta deve ser tratada como um pacote.

1. Arquivo: calculadora.py
def somar(a, b):
   return a + b

def multiplicar(a, b):
   return a * b

2. Arquivo: saudacoes.py
def ola(nome):
   return f"Olá, {nome}!"

def tchau(nome):
   return f"Tchau, {nome}!"

3. Arquivo: __init__.py
# Pode ficar vazio ou importar elementos para facilitar o uso.
from .calculadora import somar, multiplicar
from .saudacoes import ola, tchau

Usando o pacote em outro arquivo (por exemplo, main.py):
# Supondo que main.py está no mesmo nível da pasta 'meu_pacote'.
from meu_pacote import somar, ola

print(somar(3, 4)) # 7
print(ola("Ana"))  # Olá, Ana!

Observações:
O arquivo __init__.py é obrigatório (em versões antigas) para que o Python reconheça a pasta como pacote.
Hoje em dia, ele é opcional, mas recomendado.
Você pode importar os módulos diretamente (from meu_pacote import calculadora) ou usar o __init__.py para facilitar.

--------------------------------------------------------------------------------------------------------------------